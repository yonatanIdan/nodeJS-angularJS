#!/usr/bin/env node

/**
 * Module dependencies.
 */
const mongoose = require("mongoose");
var app = require('../app');
var debug = require('debug')('mongoo:server');
var https = require('https');
var http = require('http');
const fs = require('fs');
const url = require('url');

const privateKey = fs.readFileSync('/etc/letsencrypt/live/rtfs0620.xyz/privkey.pem', 'utf8');
const certificate = fs.readFileSync('/etc/letsencrypt/live/rtfs0620.xyz/cert.pem', 'utf8');
const ca = fs.readFileSync('/etc/letsencrypt/live/rtfs0620.xyz/chain.pem', 'utf8');

const credentials = {
    key: privateKey,
    cert: certificate,
    ca: ca
};

/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || '3014');
const sslPort = '3012';
app.set('port', sslPort);


/**
 * Create HTTPS server.
 */
var sslServer = https.createServer(credentials, app);

/**
 * Listen on provided port, on all network interfaces.
 */
//connect DB
// mongoose.connect('mongodb://localhost:27017/myusers', {
mongoose.connect('mongodb+srv://yonatan:599%21yonatan0445@cluster0.6myas.mongodb.net/myusers?authSource=admin&replicaSet=atlas-xti9k1-shard-0&w=majority&readPreference=primary&appname=MongoDB%20Compass&retryWrites=true&ssl=true', {
        useUnifiedTopology: true,
        useNewUrlParser: true,
        useCreateIndex: true,
        useFindAndModify: false
    })
    .then(() => {
        const io = require("socket.io")(sslServer, {
            cors: {
            //   origin: "http://localhost:4200",
              origin: "https://rtfs0620.xyz:3012/",
              methods: ["GET", "POST"]
            },
          });
          const users = []
          io.on("connection", (socket) => {
            console.log('Socket Id connected', socket.id);
            console.log('socketCount', io.of("/").sockets.size); // number of all clinet
            let allSockets = io.allSockets(); // list of all client
            console.log('allSockets:', allSockets); 

            socket.on('disconnect', ()=>{
                for (let i = 0 ,j = 0; i < users.length; i++ ,j++) {
                    if(users[i].id == socket.id || (!socket.id)){
                        users.splice(i, 1)
                        socket.emit("users", users);
                        socket.broadcast.emit("users", (users));
                    }                    
                }
                console.log("leave with:", socket.id);
            });
            
            socket.on('join', function(data){ //joining 
                socket.join("lobi");
                users.push({
                    id: socket.id,
                    name: data.user, 
                    email: data.email,
                });
                socket.emit("users", users);
                socket.broadcast.emit("users", (users));
            });

            socket.on("question", (arg, name) => {
                console.log("Message from:", name || socket.id, "massege:", arg);
                let answer = JSON.stringify({ user: name, id: socket.id, message: arg })
                socket.emit("answer", answer);
                socket.broadcast.emit("answer", answer);
            });
            
            socket.on("private message", (anotherSocketId, myName, msg) => {
                let answer = JSON.stringify({ user: myName, id: 'praivate massage', toId: anotherSocketId.id, message: msg })
                socket.to(anotherSocketId.id).emit("answer private", answer);
            });
        });
          
        const Server = http.createServer((req, res) => {
            let pathname = url.parse(req.url).pathname; 
            res.writeHead(301, { Location: 'https://rtfs0620.xyz:3012'+ pathname });
            res.end();
        });

        /**
         * Listen on provided port, on all network interfaces.
         */
        sslServer.listen(sslPort);
        Server.listen(port);
        Server.on('error', onError);
        Server.on('listening', onListening);
    })
    .catch(err => {
        console.log("DB connection Error", err.message);
    });


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ?
        'Pipe ' + port :
        'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = sslServer.address();
    var bind = typeof addr === 'string' ?
        'pipe ' + addr :
        'port ' + addr.port;
    debug('Listening on ' + bind);
}
